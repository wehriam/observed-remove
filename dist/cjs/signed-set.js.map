{"version":3,"sources":["../../src/signed-set.js"],"names":["SignedObservedRemoveSet","ObservedRemoveSet","constructor","entries","options","key","Error","verify","format","insertionSignatureMap","Map","deletionSignatureMap","value","id","signature","addSigned","dump","insertQueue","deleteQueue","signedInsertQueue","map","hash","get","JSON","stringify","signedDeleteQueue","queue","flush","now","Date","deletions","timestamp","parseInt","slice","maxAge","delete","process","signedQueue","skipFlush","InvalidSignatureError","set","pair","pairs","message","push","dequeue","deleteSignedId","pairId","clear","add"],"mappings":"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","sourcesContent":["// @flow\n\nimport ObservedRemoveSet from './set';\nimport getVerifier from './verifier';\nimport { InvalidSignatureError } from './signed-error';\n\ntype Options = {\n  maxAge?:number,\n  bufferPublishing?:number,\n  key: any,\n  format?: string\n};\n\nexport default class SignedObservedRemoveSet<T> extends ObservedRemoveSet<T> {\n  constructor(entries?: Iterable<[T, string, string]>, options?:Options) {\n    super([], options);\n    if (!options || !options.key) {\n      throw new Error('Missing required options.key parameter');\n    }\n    this.verify = getVerifier(options.key, options.format);\n    this.insertionSignatureMap = new Map();\n    this.deletionSignatureMap = new Map();\n    if (!entries) {\n      return;\n    }\n    for (const [value, id, signature] of entries) {\n      this.addSigned(value, id, signature);\n    }\n  }\n\n  declare insertionSignatureMap: Map<string, string>;\n  declare deletionSignatureMap: Map<string, string>;\n  declare verify: (string, ...Array<any>) => boolean;\n\n  /**\n   * Return an array containing all of the set's insertions and deletions.\n   * @return {Array<Array<any>>}\n   */\n  dump():[Array<*>, Array<*>] {\n    const [insertQueue, deleteQueue] = super.dump();\n    const signedInsertQueue = insertQueue.map(([hash, [id, value]]) => {\n      const signature = this.insertionSignatureMap.get(id);\n      if (!signature) {\n        throw new Error(`Missing signature for insertion with id \"${id}\" and value \"${JSON.stringify(value)}\"`);\n      }\n      return [signature, id, hash, value];\n    });\n    const signedDeleteQueue = deleteQueue.map(([id, hash]) => {\n      const signature = this.deletionSignatureMap.get(id);\n      if (!signature) {\n        throw new Error(`Missing signature for deletion with id \"${id}\"`);\n      }\n      return [signature, id, hash];\n    });\n    const queue = [signedInsertQueue, signedDeleteQueue];\n    return queue;\n  }\n\n  flush():void {\n    const now = Date.now();\n    for (const [id] of this.deletions) {\n      const timestamp = parseInt(id.slice(0, 9), 36);\n      if (now - timestamp >= this.maxAge) {\n        this.deletions.delete(id);\n        this.deletionSignatureMap.delete(id);\n      }\n    }\n  }\n\n  process(signedQueue:[Array<*>, Array<*>], skipFlush?: boolean = false):void {\n    const [signedInsertQueue, signedDeleteQueue] = signedQueue;\n    const insertQueue = signedInsertQueue.map(([signature, id, hash, value]) => {\n      if (!this.verify(signature, value, id)) {\n        throw new InvalidSignatureError(`Signature does not match for value ${JSON.stringify(value)}`);\n      }\n      this.insertionSignatureMap.set(id, signature);\n      return [hash, [id, value]];\n    });\n    const deleteQueue = signedDeleteQueue.map(([signature, id, hash]) => {\n      if (!this.verify(signature, id)) {\n        throw new InvalidSignatureError(`Signature does not match for id ${JSON.stringify(id)}`);\n      }\n      this.deletionSignatureMap.set(id, signature);\n      return [id, hash];\n    });\n    const queue:[Array<[string, [string, T]]>, Array<[string, string]>] = [insertQueue, deleteQueue];\n    super.process(queue, skipFlush);\n    for (const [signature, id, hash] of signedInsertQueue) { // eslint-disable-line no-unused-vars\n      const pair = this.pairs.get(hash);\n      if (!pair || pair[0] !== id) {\n        this.insertionSignatureMap.delete(id);\n      }\n    }\n  }\n\n  addSigned(value:T, id:string, signature:string) {\n    const hash = this.hash(value);\n    const message = [signature, id, hash, value];\n    this.process([[message], []], true);\n    this.insertQueue.push(message);\n    this.dequeue();\n    return this;\n  }\n\n  deleteSignedId(id:string, signature:string):void {\n    for (const [hash, [pairId]] of this.pairs) {\n      if (pairId === id) {\n        const message = [signature, id, hash];\n        this.process([[], [message]], true);\n        this.deleteQueue.push(message);\n        this.dequeue();\n        return;\n      }\n    }\n  }\n\n  clear():void {\n    throw new Error('Unsupported method clear()');\n  }\n\n  add() {\n    throw new Error('Unsupported method add(), use addSigned()');\n  }\n\n  delete() {\n    throw new Error('Unsupported method delete(), use deleteSignedId()');\n  }\n}\n\n"],"file":"signed-set.js"}